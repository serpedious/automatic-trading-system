version: '2.1'
orbs:
  aws-s3: circleci/aws-s3@3.0
  slack: circleci/slack@3.3.0

executors:
  default:
    docker:
      - image: circleci/node:10.17.0
      - image: circleci/python:3.6
        # aws_auth:
        #     aws_access_key_id: 
        #     aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY

# commands:
#   npm_install:
#     steps:
#       - restore_cache:
#           key: dependency-cache-{{ checksum "package.json" }}
#       - run: npm install
#       - save_cache:
#           key: dependency-cache-{{ checksum "package.json" }}
#           paths:
#               - node_modules

jobs:
  test_front:
    executor: default
    working_directory: ~/workspace/
    steps:
      - checkout
      - run:
          name: install
          command: yarn install
          working_directory: front
      - run:
          name: jest test
          command: yarn run test
          working_directory: front
      - slack/status:
          success_message: ':circleci-pass: $CIRCLE_BRANCH front test is success!\n:github_octocat: User：$CIRCLE_USERNAME'
          failure_message: ':circleci-fail: $CIRCLE_BRANCH front test failed!\n:github_octocat: User：$CIRCLE_USERNAME'
          webhook: '${SLACK_WEBHOOK}'

  deploy_front:
    executor: default
    working_directory: ~/workspace/front
    steps:
      - checkout
      - run:
          name: install
          command: yarn install
          working_directory: front
      - run:
          name: build
          command: yarn nuxt generate
          working_directory: front
      - aws-s3/sync:
          from: front/dist
          to: s3://automatic-trading-system-s3-bucket-for-nuxt/
      - slack/status:
          success_message: ':circleci-pass: $CIRCLE_BRANCH front deploy is success!\n:github_octocat: User：$CIRCLE_USERNAME'
          failure_message: ':circleci-fail: $CIRCLE_BRANCH front deploy is failed!\n:github_octocat: User：$CIRCLE_USERNAME'
          webhook: '${SLACK_WEBHOOK}'

  test_server:
    executor: default
    docker:
      - image: circleci/golang:latest
    working_directory: ~/workspace/server
    steps:
      - checkout
      - run:
          name: test golang api
          command: go test -run ''
          working_directory: server
      - slack/status:
          success_message: ':circleci-pass: $CIRCLE_BRANCH server test is success!\n:github_octocat: User：$CIRCLE_USERNAME'
          failure_message: ':circleci-fail: $CIRCLE_BRANCH server test is failed!\n:github_octocat: User：$CIRCLE_USERNAME'
          webhook: '${SLACK_WEBHOOK}'

  deploy_server:
    executor: default
    working_directory: ~/workspace/server
    steps:
      - checkout
      - run:
          name: deploy for production
          command: |
            echo -e "Host git-codecommit.*.amazonaws.com\n  User ${IAM_SSH_KEY_ID}\n  StrictHostKeyChecking no\n  UserKnownHostsFile=/dev/null" >> ${HOME}/.ssh/config
            git push ssh://git-codecommit.ap-northeast-1.amazonaws.com/v1/repos/automatic_api_repo main
          working_directory: server
      - slack/status:
          success_message: ':circleci-pass: $CIRCLE_BRANCH server deploy is success!\n:github_octocat: User：$CIRCLE_USERNAME'
          failure_message: ':circleci-fail: $CIRCLE_BRANCH server deploy is failed!\n:github_octocat: User：$CIRCLE_USERNAME'
          webhook: '${SLACK_WEBHOOK}'


workflows:
  version: 2
  continuous-deploy:
    jobs:
      - test_server
      # - deploy_server:
      #     requires:
      #       - test_server
      #     filters:
      #       branches:
      #         only: main
      - test_front
      # - deploy_front:
      #     requires:
      #       - test_front
      #     filters:
      #       branches:
      #         only: main
